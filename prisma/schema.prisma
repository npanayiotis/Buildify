// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for template types
enum TemplateType {
  TECH_STARTUP
  FASHION_BOUTIQUE
  PERSONAL_BLOG
  PHOTOGRAPHY_PORTFOLIO
  RESTAURANT
  CONSULTING_FIRM
  ONLINE_STORE
  TRAVEL_AGENCY
}

// Core SaaS Models
model User {
  id        String   @id @default(cuid())
  tenantId  String
  email     String   @unique
  password  String
  role      String   @default("user") // admin, user, editor
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Tenant relationship
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Template relationship
  templateId String? @unique
  template   Template? @relation(fields: [templateId], references: [id])

  // Blog relationship
  blogPosts  BlogPost[]

  @@map("users")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique // Used for subdomains or unique identifiers
  domain    String?  @unique // Custom domain for the tenant
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  users         User[]
  settings      TenantSettings?
  templates     Template[] // A tenant can have multiple templates (if they subscribe to more)

  // Template-specific data (isolated by tenantId)
  techStartupServices      TechStartupService[]
  techStartupTeamMembers   TechStartupTeamMember[]
  contactForms             ContactForm[]
  blogPosts                BlogPost[]
  blogComments             BlogComment[]
  portfolioProjects        PortfolioProject[]
  restaurantMenus          RestaurantMenu[]
  restaurantReservations   RestaurantReservation[]
  consultingServices       ConsultingService[]
  consultingCaseStudies    ConsultingCaseStudy[]
  products                 Product[]
  productCategories        ProductCategory[]
  carts                    Cart[]
  orders                   Order[]
  travelPackages           TravelPackage[]
  travelBookings           TravelBooking[]

  @@map("tenants")
}

model TenantSettings {
  id        String   @id @default(cuid())
  tenantId  String   @unique
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  logoUrl   String?
  faviconUrl String?
  primaryColor String?
  secondaryColor String?
  fontFamily String?
  // Add other global settings here
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tenant_settings")
}

model Template {
  id          String      @id @default(cuid())
  name        String
  type        TemplateType
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  tenantId String  @unique // A template instance belongs to one tenant
  tenant   Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users    User[] // Users associated with this specific template instance

  @@map("templates")
}

// Template-specific models
model TechStartupService {
  id          String   @id @default(cuid())
  tenantId    String
  title       String
  description String
  icon        String   @default("ðŸš€")
  price       Float?
  features    String[] // JSON array of features
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("tech_startup_services")
}

model TechStartupTeamMember {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  position    String
  bio         String?
  imageUrl    String?
  linkedinUrl String?
  twitterUrl  String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("tech_startup_team_members")
}

model ContactForm {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  email     String
  subject   String?
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("contact_forms")
}

// E-commerce models (for Fashion Boutique, Online Store)
model Product {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String
  price       Float
  comparePrice Float?
  sku         String?
  images      String[] // JSON array of image URLs
  category    String?
  tags        String[] // JSON array of tags
  inventory   Int      @default(0)
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@map("products")
}

model ProductCategory {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  slug        String
  description String?
  image       String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("product_categories")
}

// E-commerce Cart Models
model Cart {
  id        String     @id @default(cuid())
  tenantId  String
  sessionId String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relationships
  tenant    Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Order {
  id          String      @id @default(cuid())
  tenantId    String
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)

  // Customer info
  customerName    String
  customerEmail   String
  customerPhone   String?

  // Shipping info
  shippingAddress String
  shippingCity    String
  shippingState   String
  shippingZip     String
  shippingCountry String @default("US")

  // Order totals
  subtotal    Float
  taxAmount   Float
  shippingAmount Float
  totalAmount Float

  // Payment info
  paymentMethod String?
  paymentStatus PaymentStatus @default(PENDING)
  transactionId String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items       OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  // Relationships
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Blog models (for Personal Blog)
model BlogPost {
  id          String   @id @default(cuid())
  tenantId    String
  title       String
  slug        String   @unique
  content     String
  imageUrl    String?
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  isPublished Boolean  @default(false)
  category    String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  comments    BlogComment[]

  @@map("blog_posts")
}

model BlogComment {
  id        String   @id @default(cuid())
  tenantId  String
  postId    String
  post      BlogPost @relation(fields: [postId], references: [id])
  author    String
  email     String
  content   String
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("blog_comments")
}

// Photography Portfolio models
model PortfolioProject {
  id          String   @id @default(cuid())
  tenantId    String
  title       String
  description String?
  category    String?
  images      String[] // JSON array of image URLs
  order       Int      @default(0)
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("portfolio_projects")
}

// Restaurant models
model RestaurantMenu {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String?
  price       Float
  imageUrl    String?
  category    String?
  isAvailable Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("restaurant_menus")
}

model RestaurantReservation {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  email     String
  phone     String?
  date      DateTime
  time      String
  guests    Int
  message   String?
  status    String   @default("pending") // pending, confirmed, cancelled, completed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("restaurant_reservations")
}

// Consulting Firm models
model ConsultingService {
  id          String   @id @default(cuid())
  tenantId    String
  title       String
  description String
  icon        String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("consulting_services")
}

model ConsultingCaseStudy {
  id          String   @id @default(cuid())
  tenantId    String
  title       String
  slug        String   @unique
  description String
  content     String
  imageUrl    String?
  client      String?
  industry    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("case_studies")
}



enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Travel Agency models
model TravelPackage {
  id          String   @id @default(cuid())
  tenantId    String
  title       String
  description String
  destination String
  duration    Int      // Number of days
  price       Float
  originalPrice Float?
  images      String[] // JSON array of image URLs
  features    String[] // JSON array of features
  itinerary   String   // JSON string of daily itinerary
  includes    String[] // JSON array of what's included
  excludes    String[] // JSON array of what's excluded
  maxTravelers Int     @default(1)
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  bookings    TravelBooking[]

  @@map("travel_packages")
}

model TravelBooking {
  id        String   @id @default(cuid())
  tenantId  String
  packageId String
  package   TravelPackage @relation(fields: [packageId], references: [id])
  
  // Customer info
  customerName    String
  customerEmail   String
  customerPhone   String?
  
  // Booking details
  travelers       Int
  totalPrice      Float
  bookingDate     DateTime
  travelDate      DateTime
  
  // Status
  status          BookingStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  transactionId   String?
  
  // Special requests
  specialRequests String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("travel_bookings")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}