// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// USER MANAGEMENT
// ========================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  passwordHash  String
  avatar        String?
  plan          Plan      @default(FREE)
  planExpiresAt DateTime?
  isActive      Boolean   @default(true)
  
  // Relationships
  websites      Website[]
  subscriptions Subscription[]
  sessions      Session[]
  files         File[]
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@map("sessions")
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

// ========================================
// SUBSCRIPTION MANAGEMENT
// ========================================

model Subscription {
  id                String            @id @default(cuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  stripeCustomerId  String?           @unique
  stripeSubscriptionId String?        @unique
  stripePriceId     String?
  
  plan              Plan              @default(FREE)
  status            SubscriptionStatus @default(ACTIVE)
  
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@map("subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIALING
}

// ========================================
// WEBSITE MANAGEMENT
// ========================================

model Website {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic Info
  name          String
  description   String?
  
  // Domain Configuration
  subdomain     String?   @unique // e.g., "mybusiness"
  customDomain  String?   @unique // e.g., "mybusiness.com"
  domainVerified Boolean  @default(false)
  domainStatus  DomainStatus @default(PENDING)
  
  // Template & Design
  templateId    String
  template      Template  @relation(fields: [templateId], references: [id])
  templateData  Json?     // Store original template data
  customCSS     String?
  customJS      String?
  favicon       String?
  
  // SEO
  metaTitle     String?
  metaDescription String?
  metaKeywords  String?
  
  // Status
  published     Boolean   @default(false)
  publishedAt   DateTime?
  lastPublishedAt DateTime?
  
  // Relationships
  pages         Page[]
  settings      WebsiteSettings?
  domains       Domain[]
  analytics     WebsiteAnalytics[]
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([userId])
  @@index([subdomain])
  @@index([customDomain])
  @@index([templateId])
  @@map("websites")
}

enum DomainStatus {
  PENDING
  VERIFIED
  FAILED
  EXPIRED
}

// ========================================
// DOMAIN MANAGEMENT
// ========================================

model Domain {
  id          String   @id @default(cuid())
  websiteId   String
  website     Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  
  domain      String   @unique
  type        DomainType
  status      DomainStatus @default(PENDING)
  
  // DNS Configuration
  dnsRecords  Json?    // Store required DNS records
  verificationToken String?
  
  // SSL Certificate
  sslStatus   SSLStatus @default(PENDING)
  sslExpiresAt DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([websiteId])
  @@index([domain])
  @@map("domains")
}

enum DomainType {
  SUBDOMAIN
  CUSTOM_DOMAIN
}

enum SSLStatus {
  PENDING
  ACTIVE
  EXPIRED
  FAILED
}

// ========================================
// PAGE MANAGEMENT
// ========================================

model Page {
  id          String    @id @default(cuid())
  websiteId   String
  website     Website   @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  
  // Page Info
  title       String
  slug        String    // e.g., "/", "/about", "/contact"
  description String?
  
  // Content
  content     Json      // Stores page structure and components
  isHomepage  Boolean   @default(false)
  
  // SEO
  metaTitle   String?
  metaDescription String?
  metaImage   String?
  
  // Status
  published   Boolean   @default(false)
  order       Int       @default(0)
  
  // Relationships
  components  Component[]
  analytics   PageAnalytics[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([websiteId, slug])
  @@index([websiteId])
  @@index([slug])
  @@map("pages")
}

// ========================================
// COMPONENT MANAGEMENT
// ========================================

model Component {
  id        String      @id @default(cuid())
  pageId    String
  page      Page        @relation(fields: [pageId], references: [id], onDelete: Cascade)
  
  type      ComponentType
  name      String?
  data      Json        // Component-specific data
  order     Int         @default(0)
  
  // Styling
  customCSS String?
  
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  @@index([pageId])
  @@index([type])
  @@map("components")
}

enum ComponentType {
  HERO
  ABOUT
  SERVICES
  PORTFOLIO
  TESTIMONIALS
  CONTACT
  FOOTER
  NAVIGATION
  BLOG_POSTS
  TEAM
  PRICING
  FEATURES
  GALLERY
  CUSTOM
}

// ========================================
// WEBSITE SETTINGS
// ========================================

model WebsiteSettings {
  id          String   @id @default(cuid())
  websiteId   String   @unique
  website     Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  
  // Site Configuration
  siteName    String
  siteDescription String?
  logo        String?
  
  // Contact Information
  email       String?
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  
  // Social Media
  socialLinks Json?    // Store social media links
  
  // Analytics
  gaTrackingId String?
  fbPixelId   String?
  gtmId       String?
  
  // Integrations
  stripePublishableKey String?
  googleMapsApiKey String?
  
  // Appearance
  primaryColor String?
  secondaryColor String?
  fontFamily   String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("website_settings")
}

// ========================================
// TEMPLATE MANAGEMENT
// ========================================

model Template {
  id          String    @id @default(cuid())
  name        String
  category    String
  description String
  preview     String    // Preview image URL
  price       Float     @default(0)
  isPremium   Boolean   @default(false)
  
  // Template Data
  templateData Json     // Complete template structure
  
  // Features
  features     Json?    // Array of features
  
  // Metadata
  tags         Json?    // Array of tags
  author       String?
  version      String   @default("1.0.0")
  
  // Status
  isActive     Boolean  @default(true)
  
  // Relationships
  websites     Website[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([category])
  @@index([isPremium])
  @@index([isActive])
  @@map("templates")
}

// ========================================
// FILE MANAGEMENT
// ========================================

model File {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String   @unique
  
  // File metadata
  width       Int?
  height      Int?
  
  // Relationships
  websiteId   String?
  
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([websiteId])
  @@map("files")
}

// ========================================
// ANALYTICS
// ========================================

model WebsiteAnalytics {
  id          String   @id @default(cuid())
  websiteId   String
  website     Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  
  date        DateTime @default(now())
  pageViews   Int      @default(0)
  uniqueVisitors Int   @default(0)
  bounceRate  Float?
  avgSessionDuration Float?
  
  // Traffic Sources
  organic     Int      @default(0)
  direct      Int      @default(0)
  social      Int      @default(0)
  referral    Int      @default(0)
  paid        Int      @default(0)
  
  createdAt   DateTime @default(now())
  
  @@index([websiteId])
  @@index([date])
  @@map("website_analytics")
}

model PageAnalytics {
  id          String   @id @default(cuid())
  pageId      String
  page        Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  
  date        DateTime @default(now())
  views       Int      @default(0)
  uniqueViews Int      @default(0)
  avgTimeOnPage Float?
  
  createdAt   DateTime @default(now())
  
  @@index([pageId])
  @@index([date])
  @@map("page_analytics")
}

// ========================================
// NOTIFICATIONS
// ========================================

model Notification {
  id        String           @id @default(cuid())
  userId    String
  
  type      NotificationType
  title     String
  message   String
  data      Json?            // Additional data
  
  read      Boolean          @default(false)
  
  createdAt DateTime         @default(now())
  
  @@index([userId])
  @@index([read])
  @@map("notifications")
}

enum NotificationType {
  WEBSITE_PUBLISHED
  DOMAIN_VERIFIED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  SUBSCRIPTION_EXPIRED
  SYSTEM_UPDATE
}

// ========================================
// API USAGE TRACKING
// ========================================

model ApiUsage {
  id          String   @id @default(cuid())
  userId      String
  
  endpoint    String
  method      String
  statusCode  Int
  responseTime Int     // in milliseconds
  
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([createdAt])
  @@map("api_usage")
}

// ========================================
// CONTACT SUBMISSIONS
// ========================================

model ContactSubmission {
  id               String   @id @default(cuid())
  
  // Contact Details
  name             String
  email            String
  phone            String?
  subject          String
  message          String
  preferredContact String   @default("email")
  
  // Website Context
  websiteType      String   @default("general")
  websiteId        String?
  
  // Status
  status           ContactStatus @default(NEW)
  assignedTo       String?
  notes            String?
  
  // Timestamps
  submittedAt      DateTime @default(now())
  respondedAt      DateTime?
  resolvedAt       DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([websiteType])
  @@index([websiteId])
  @@index([status])
  @@index([submittedAt])
  @@map("contact_submissions")
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}