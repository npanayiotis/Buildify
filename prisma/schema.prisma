// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for template types
enum TemplateCategory {
  BUSINESS
  PORTFOLIO
  ECOMMERCE
  BLOG
  SAAS
  RESTAURANT
  GYM
}

// Core SaaS Models
model User {
  id        String   @id @default(cuid())
  tenantId  String
  email     String   @unique
  password  String
  role      String   @default("user") // admin, user, editor
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Tenant relationship
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Template relationship
  templateId String? @unique
  template   Template? @relation(fields: [templateId], references: [id])

  // Blog relationship
  blogPosts  BlogPost[]

  @@map("users")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique // Used for subdomains or unique identifiers
  domain    String?  @unique // Custom domain for the tenant
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  users         User[]
  settings      TenantSettings?
  templates     Template[] // A tenant can have multiple templates (if they subscribe to more)
  subscriptions Subscription[]

  // Template-specific data (isolated by tenantId)
  contactForms             ContactForm[]
  blogPosts                BlogPost[]
  blogComments             BlogComment[]
  products                 Product[]
  productCategories        ProductCategory[]
  carts                    Cart[]
  orders                   Order[]
  
  // Blog website data
  blogCategories           BlogCategory[]
  blogTags                 BlogTag[]
  newsletterSubscribers    NewsletterSubscriber[]
  
  // Restaurant website data
  restaurantMenus          RestaurantMenu[]
  reservations             Reservation[]
  restaurantReviews        RestaurantReview[]
  
  // Gym website data
  gymPrograms              GymProgram[]
  gymTrainers              GymTrainer[]
  membershipPlans          MembershipPlan[]
  gymMembers               GymMember[]
  gymReviews               GymReview[]

  @@map("tenants")
}

model TenantSettings {
  id        String   @id @default(cuid())
  tenantId  String   @unique
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  logoUrl   String?
  faviconUrl String?
  primaryColor String?
  secondaryColor String?
  fontFamily String?
  // Add other global settings here
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tenant_settings")
}

model Template {
  id          String           @id @default(cuid())
  name        String
  category    TemplateCategory
  description String?
  previewUrl  String?
  isActive    Boolean          @default(true)
  isPremium   Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relationships
  tenantId String  @unique // A template instance belongs to one tenant
  tenant   Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users    User[] // Users associated with this specific template instance

  @@map("templates")
}

// Generic content models for all templates

model ContactForm {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  email     String
  subject   String?
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("contact_forms")
}

// E-commerce models (for Fashion Boutique, Online Store)
model Product {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String
  price       Float
  comparePrice Float?
  sku         String?
  images      String[] // JSON array of image URLs
  category    String?
  tags        String[] // JSON array of tags
  inventory   Int      @default(0)
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@map("products")
}

model ProductCategory {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  slug        String
  description String?
  image       String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("product_categories")
}

// E-commerce Cart Models
model Cart {
  id        String     @id @default(cuid())
  tenantId  String
  sessionId String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relationships
  tenant    Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Order {
  id          String      @id @default(cuid())
  tenantId    String
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)

  // Customer info
  customerName    String
  customerEmail   String
  customerPhone   String?

  // Shipping info
  shippingAddress String
  shippingCity    String
  shippingState   String
  shippingZip     String
  shippingCountry String @default("US")

  // Order totals
  subtotal    Float
  taxAmount   Float
  shippingAmount Float
  totalAmount Float

  // Payment info
  paymentMethod String?
  paymentStatus PaymentStatus @default(PENDING)
  transactionId String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items       OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  // Relationships
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Blog models (for Personal Blog)
model BlogPost {
  id          String   @id @default(cuid())
  tenantId    String
  title       String
  slug        String   @unique
  content     String
  excerpt     String?  // Short description for previews
  imageUrl    String?
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  isPublished Boolean  @default(false)
  category    String?
  tags        String[]
  readTime    Int?     // Estimated read time in minutes
  viewCount   Int      @default(0)
  isFeatured  Boolean  @default(false)
  seoTitle    String?  // SEO meta title
  seoDescription String? // SEO meta description
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  comments    BlogComment[]

  @@map("blog_posts")
}

model BlogComment {
  id        String   @id @default(cuid())
  tenantId  String
  postId    String
  post      BlogPost @relation(fields: [postId], references: [id])
  author    String
  email     String
  content   String
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("blog_comments")
}




enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Subscription and pricing models
model Subscription {
  id          String   @id @default(cuid())
  tenantId    String
  plan        String   // free, starter, advanced, unlimited
  status      String   // active, cancelled, expired
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// ===========================================
// BLOG WEBSITE MODELS
// ===========================================

model BlogCategory {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  slug        String
  description String?
  color       String?  // Hex color for category
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  posts       BlogPost[]

  @@map("blog_categories")
}

model BlogTag {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  slug      String
  color     String?  // Hex color for tag
  createdAt DateTime @default(now())

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  posts     BlogPost[]

  @@map("blog_tags")
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  tenantId  String
  email     String
  name      String?
  isActive  Boolean  @default(true)
  source    String?  // Where they subscribed from
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, email])
  @@map("newsletter_subscribers")
}

// ===========================================
// RESTAURANT WEBSITE MODELS
// ===========================================

model RestaurantMenu {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items       MenuItem[]

  @@map("restaurant_menus")
}

model MenuItem {
  id          String   @id @default(cuid())
  tenantId    String
  menuId      String
  name        String
  description String
  price       Float
  imageUrl    String?
  category    String?  // Appetizer, Main Course, Dessert, etc.
  isPopular   Boolean  @default(false)
  isAvailable Boolean  @default(true)
  allergens   String[] // JSON array of allergens
  ingredients String[] // JSON array of ingredients
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  menu        RestaurantMenu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@map("menu_items")
}

model Reservation {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  email       String
  phone       String
  date        DateTime
  time        String   // Time slot
  partySize   Int
  specialRequests String?
  status      ReservationStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("reservations")
}

model RestaurantReview {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  email     String?
  rating    Int      // 1-5 stars
  title     String?
  content   String
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("restaurant_reviews")
}

// ===========================================
// GYM WEBSITE MODELS
// ===========================================

model GymProgram {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String
  price       Float
  duration    String   // 30 minutes, 60 minutes, etc.
  icon        String?  // Icon emoji or URL
  features    String[] // JSON array of features
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("gym_programs")
}

model GymTrainer {
  id            String   @id @default(cuid())
  tenantId      String
  name          String
  role          String   // Head Trainer, Fitness Coach, etc.
  bio           String
  imageUrl      String?
  specialties   String[] // JSON array of specialties
  certifications String[] // JSON array of certifications
  experience    String?  // Years of experience
  isActive      Boolean  @default(true)
  order         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("gym_trainers")
}

model MembershipPlan {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  price       Float
  period      String   // month, year
  features    String[] // JSON array of features
  isPopular   Boolean  @default(false)
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("membership_plans")
}

model GymMember {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  email       String
  phone       String?
  planId      String?
  plan        MembershipPlan? @relation(fields: [planId], references: [id])
  joinDate    DateTime @default(now())
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("gym_members")
}

model GymReview {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  email     String?
  rating    Int      // 1-5 stars
  title     String?
  content   String
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("gym_reviews")
}

// ===========================================
// ENUMS
// ===========================================

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

// ===========================================
// UPDATE EXISTING MODELS WITH NEW RELATIONSHIPS
// ===========================================

// Update Tenant model to include new relationships
// (This would be added to the existing Tenant model)
// blogCategories        BlogCategory[]
// blogTags             BlogTag[]
// newsletterSubscribers NewsletterSubscriber[]
// restaurantMenus      RestaurantMenu[]
// reservations         Reservation[]
// restaurantReviews    RestaurantReview[]
// gymPrograms          GymProgram[]
// gymTrainers          GymTrainer[]
// membershipPlans      MembershipPlan[]
// gymMembers           GymMember[]
// gymReviews           GymReview[]

// Update BlogPost model to include category and tags
// (This would be added to the existing BlogPost model)
// categoryId String?
// category   BlogCategory? @relation(fields: [categoryId], references: [id])
// tags       BlogTag[]